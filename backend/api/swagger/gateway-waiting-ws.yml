openapi: 3.0.3
info:
  title: ChantingKakigori Gateway Waiting WS API
  version: 0.1.0
servers:
  - url: /
paths:
  /ws/stay:
    get:
      summary: WebSocket endpoint for waiting room state broadcast
      description: |
        WebSocket 接続先: `ws://<host>/ws/stay?room=<ROOM_ID>`。

        同じ room の接続数に応じて以下のmessageを全員にブロードキャストします。

        1 クライアント接続中:
        ```json
        { "stay_num": "1", "start_time": "null" }
        ```

        2 クライアント接続中:
        ```json
        { "stay_num": "2", "start_time": "null" }
        ```

        3 クライアント目が接続したら即座に、10 秒後の開始時刻（JST, +09:00）を含むメッセージを返します:
        ```json
        { "stay_num": "3", "start_time": "2017-07-22T02:32:28+09:00" }
        ```
        をブロードキャストし、その後はサーバ側で切断します。
      parameters:
        - in: query
          name: room
          required: true
          schema:
            type: string
      responses:
        "101": { description: Switching Protocols }
  /ws/health:
    get:
      summary: Liveness probe endpoint
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: { type: string, example: ok }
  /ws/confirm:
    get:
      summary: WebSocket endpoint for confirmation and order creation trigger
      description: |
        WebSocket 接続先: `ws://<host>/ws/confirm?room=<ROOM_ID>`。
        フロー（全員Ready方式にした）:
        1. 同じ room の全クライアントが WebSocket に接続します。
        2. 各クライアントは接続後に詠唱のステータスが完了した場合にサーバへ以下のメッセージを1回だけ送信します。
           ```json
           { "status": "ready" }
           ```
        3. 現在の接続クライアント数と "ready" を送ってきたクライアント数が一致した時点で、注文をして各クライアントに別の注文で以下のメッセージをサーバーから送信します。
           ```json
           {
             "id": "store-001-1",
             "menu_item_id": "giiku-sai",
             "menu_name": "技育祭な いちご味",
             "status": "pending",
             "order_number": 1
           }
           ```
        備考:
        - クライアントが切断された場合は、接続集合が縮小されます。残っている全クライアントが既に "ready" 済みであれば即時に注文が実行されます。
        - 同一クライアントから複数回メッセージを送らない前提です（多重カウントは行いません）。

      parameters:
        - in: query
          name: room
          required: true
          schema:
            type: string
      responses:
        "101": { description: Switching Protocols }
