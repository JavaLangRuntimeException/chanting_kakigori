name: test

on:
  pull_request:
    types: [opened, synchronize]
    paths:
      - 'backend/**'
      - '.github/workflows/test.yml'

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Detect changed services
        id: set-matrix
        run: |
          all_services=$(find backend/services -maxdepth 1 -type d -not -path backend/services | sed 's|backend/services/||' | sort)
          echo "All services: $all_services"

          if [ "${{ github.event_name }}" = "pull_request" ]; then
            base_sha="${{ github.event.pull_request.base.sha }}"
            head_sha="${{ github.event.pull_request.head.sha }}"
          else
            base_sha="${{ github.event.before }}"
            head_sha="${{ github.sha }}"
          fi

          changed_files=$(git diff --name-only $base_sha..$head_sha)
          echo "Changed files:"
          echo "$changed_files"

          gen_changed=false
          if echo "$changed_files" | grep -E '^backend/(gen|proto)/' > /dev/null; then
            gen_changed=true
            echo "Gen/proto files changed - will test all services"
          fi

          changed_services=""
          for service in $all_services; do
            if [ "$gen_changed" = "true" ] || echo "$changed_files" | grep -E "^backend/services/$service/" > /dev/null; then
              if [ -z "$changed_services" ]; then
                changed_services="\"$service\""
              else
                changed_services="$changed_services,\"$service\""
              fi
              echo "Service $service will be tested"
            fi
          done

          if [ -z "$changed_services" ]; then
            matrix='{"service":[]}'
          else
            matrix="{\"service\":[$changed_services]}"
          fi

          echo "matrix=$matrix" >> $GITHUB_OUTPUT
          echo "Final matrix: $matrix"

  test-services:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.matrix != '{"service":[]}' }}
    strategy:
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
      fail-fast: false
    env:
      GOTOOLCHAIN: local
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.x'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install buf
        run: |
          sudo bash -lc "curl -sSL https://github.com/bufbuild/buf/releases/download/v1.47.2/buf-Linux-x86_64 -o /usr/local/bin/buf && chmod +x /usr/local/bin/buf"

      - name: Proto lint & generate
        working-directory: backend
        run: |
          make proto

      - name: Run unit tests for ${{ matrix.service }}
        working-directory: backend
        run: |
          go work sync || true
          go test ./services/${{ matrix.service }}/...

